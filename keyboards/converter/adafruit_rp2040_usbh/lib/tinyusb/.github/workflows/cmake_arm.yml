name: CMake ARM

on:
  workflow_dispatch:
  push:
    paths:
      - 'src/**'
      - 'examples/**'
      - 'lib/**'
      - 'hw/**'
      - '.github/workflows/cmake_arm.yml'
  pull_request:
    branches: [ master ]
    paths:
      - 'src/**'
      - 'examples/**'
      - 'lib/**'
      - 'hw/**'
      - '.github/workflows/cmake_arm.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # ---------------------------------------
  # Build ARM family
  # ---------------------------------------
  build-arm:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        family:
          # Alphabetical order
          - 'imxrt'
          - 'kinetis_kl'
          - 'lpc18 lpc40 lpc43'
          - 'lpc54 lpc55'
          - 'mcx'
          - 'nrf'
          - 'ra'
          - 'rp2040'
          - 'samd21'
          - 'samd51'
          - 'stm32f0'
          - 'stm32f1'
          - 'stm32f4'
          - 'stm32f7'
          - 'stm32g0'
          - 'stm32g4'
          - 'stm32h7'
          - 'stm32l4'
          - 'stm32u5'
    steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install ARM GCC
      uses: carlosperate/arm-none-eabi-gcc-action@v1
      with:
        release: '11.2-2022.02'

    - name: Install Ninja
      run: sudo apt install -y ninja-build

    - name: Checkout TinyUSB
      uses: actions/checkout@v3

    - name: Checkout pico-sdk for rp2040
      if: matrix.family == 'rp2040'
      uses: actions/checkout@v3
      with:
        repository: raspberrypi/pico-sdk
        ref: develop
        path: pico-sdk

    - name: Get Dependencies
      run: python3 tools/get_deps.py ${{ matrix.family }}

    - name: Build
      run: python tools/build_cmake.py ${{ matrix.family }} -DCMAKE_BUILD_TYPE=MinSizeRel
      env:
        # for rp2040, there is no harm if defined for other families
        PICO_SDK_PATH: ${{ github.workspace }}/pico-sdk

    # Upload binaries for hardware test with self-hosted
    - name: Prepare rp2040 Artifacts
      if: contains(matrix.family, 'rp2040') && github.repository_owner == 'hathach'
      working-directory: ${{github.workspace}}/cmake-build/cmake-build-raspberry_pi_pico
      run: |
        find device/ -name "*.elf" -exec mv {} ../../ \;
        # find host/ -name "*.elf" -exec mv {} ../../ \;
        # find dual/ -name "*.elf" -exec mv {} ../../ \;

    - name: Upload Artifacts for rp2040
      if: contains(matrix.family,'rp2040') && github.repository_owner == 'hathach'
      uses: actions/upload-artifact@v3
      with:
        name: rp2040
        path: |
          *.elf

  # ---------------------------------------
  # Hardware in the loop (HIL)
  # Current self-hosted instance is running on an RPI4.
  # For attached hardware checkout hil_pi4.json
  # ---------------------------------------
  hw-rp2040-test:
    # run only with hathach's commit due to limited resource on RPI4
    if: github.repository_owner == 'hathach'
    needs: build-arm
    runs-on: [self-hosted, rp2040, hardware-in-the-loop]

    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning up previous run"
          rm -rf "${{ github.workspace }}"
          mkdir -p "${{ github.workspace }}"

      - name: Checkout test/hil
        uses: actions/checkout@v3
        with:
          sparse-checkout: test/hil

      - name: Download rp2040 Artifacts
        uses: actions/download-artifact@v3
        with:
          name: rp2040

      - name: Test on actual hardware (hardware in the loop)
        run: |
          python3 test/hil/hil_test.py hil_pi4.json
